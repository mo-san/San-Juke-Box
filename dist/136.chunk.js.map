{"version":3,"file":"136.chunk.js","mappings":"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","sources":["webpack://san-juke-box/./src/components/TextAlive.ts","webpack://san-juke-box/./src/components-react/Lyrics.tsx"],"sourcesContent":["import React from \"react\";\nimport { Player, IPlayerApp } from \"textalive-app-api\";\nimport gsap from \"gsap\";\nimport { SongData } from \"../@types/types\";\nimport { MUSIC } from \"../data/music\";\nimport { useStore } from \"./Store\";\n\n\n/**\n * Class 'Char' in 'textalive-app-api.d.ts' is not exported by default.\n * For this line of code to work you need to modify the line, i.e.:\n * --- declare class Char extends TextUnit implements IChar {\n * +++ export declare class Char extends TextUnit implements IChar {\n */\nimport { Char } from \"textalive-app-api\";\nimport { Layer } from \"konva/lib/Layer\";\n\nexport declare class ExtendedChar extends Char {\n  /**\n   * serial number of a character in whole lyric characters\n   */\n  index: number;\n  /**\n   * This is equivalent to the 'Char.text' property (thus single character)\n   * if the original char object has no correspondent furigana;\n   * otherwise two or more characters of kanji representing a word.\n   * Or empty string if the previous character is a word.\n   */\n  letter: string;\n  furigana?: string;\n  // furigana?: { position: number; span: number; text: string };\n}\n\n\nexport class TextAlive {\n  player: Player;\n  currentSongData?: SongData;\n  currentBpm?: number;\n  currentLetter?: ExtendedChar;\n  currentFurigana = \"\";\n  queue: [number, ExtendedChar][] = [];\n  queueFlag: boolean[] = [];\n\n  constructor(token: string) {\n    this.player = new Player({\n      app: { token: token, },\n      mediaElement: document.querySelector(\"#media\") as HTMLDivElement,\n      mediaBannerPosition: \"bottom left\",\n    });\n\n    this.player.addListener({\n      onAppReady: this.onAppReady,\n\n      /* fired when all the data you need to play the song are ready */\n      onVideoReady: this.onVideoReady,\n    });\n  }\n\n  onAppReady = (app: IPlayerApp) => {\n    if (!app.songUrl) {\n      const songTitle = useStore.getState().currentSongTitle;\n      const songData = MUSIC.find((item) => item.title === songTitle) as SongData;\n      this.currentSongData = songData;\n      this.player.createFromSongUrl(songData.videoUrl, { video: songData.video });\n    }\n  };\n\n  onVideoReady = () => {\n    // if the song has no lyrics\n    if (!this.player.video.firstChar) return;\n\n    const { furigana, words } = (this.currentSongData as SongData);\n\n    // This array has all every characters, in each of row startTime is in the first column, followed by the character.\n    const charsAll: [number, ExtendedChar][] = [];\n\n    let index = 0;\n    let char = this.player.video.firstChar as ExtendedChar;\n\n    while (char) {\n      char.index = index;\n      char.letter = char.text;\n      charsAll.push([char.startTime, char]);\n      char = char.next as ExtendedChar;\n      index += 1;\n    }\n\n    charsAll.forEach(([_, char], index) => {\n      const startIndex = words.findIndex((pos) => pos === index);\n      const length = words[startIndex + 1] - words[startIndex];\n\n      char.furigana = furigana\n        .filter(({ position }) => words[startIndex] <= position && position < words[startIndex + 1])\n        .map(({ text }) => text)\n        .join(\"　\");\n\n      for (let k = 1; k < length; k++) {\n        char.letter += charsAll[index + k][1].letter;\n        charsAll[index + k][1].letter = \"\";\n      }\n    });\n\n    this.queue = charsAll;\n    this.queueFlag = new Array(charsAll.length).fill(false);\n    useStore.setState({ lyricChars: new Map<number, ExtendedChar>(charsAll) });\n  }\n\n  // onVideoReady_ = () => {\n  //   // if the song has no lyrics\n  //   if (!this.player.video.firstChar) return;\n  //\n  //   const furiganaAll = (this.currentSongData as SongData).furigana;\n  //   // This array has all every characters, in each of row startTime is in the first column, followed by the character.\n  //   const charsAll: [number, ExtendedChar][] = [];\n  //\n  //   let index = 0;\n  //   let char = this.player.video.firstChar as ExtendedChar;\n  //\n  //   while (char) {\n  //     char.index = index;\n  //     char.letter = char.text;\n  //     char.furigana = furiganaAll.find(({ position }) => position === index);\n  //     charsAll.push([char.startTime, char]);\n  //     char = char.next as ExtendedChar;\n  //     index += 1;\n  //   }\n  //\n  //   charsAll.forEach(([_, char], index) => {\n  //     // having correspondent furigana, and, its length being two or more (i.e. 熟語)\n  //     if (!char.furigana) return;\n  //     const length = char.furigana.span;\n  //     if (length <= 1) return;\n  //     for (let k = 1; k < length; k++) {\n  //       char.letter += charsAll[index + k][1].letter;\n  //       charsAll[index + k][1].letter = \"\";\n  //     }\n  //   });\n  //\n  //   this.lyricChars = new Map<number, ExtendedChar>(charsAll);\n  //   useStore.setState({ lyricChars: this.lyricChars });\n  // };\n\n  stop = () => {\n    this.player.requestStop();\n  };\n\n  seek = (event: React.MouseEvent) => {\n    this.player.requestMediaSeek(\n      this.player.video.duration * (event.clientX / (event.currentTarget as HTMLDivElement).clientWidth)\n    );\n  };\n\n  playOrPause = () => {\n    if (!this.player.video) return;\n    if (this.player.isPlaying) {\n      this.player.requestPause();\n    } else {\n      this.player.requestPlay();\n    }\n  };\n\n  /**\n   * converts a duration of a beat to bpm\n   * beatDurationSeconds = beat.duration (in milli seconds) / 1000\n   * bpm = 60(seconds) / beatDurationSeconds\n   */\n  #calcurateBpm = async (positionMs: number) => {\n    const beat = this.player.findBeat(positionMs);\n    if (!beat) return;\n    let bpm: number;\n\n    if (useStore.getState().currentSongTitle === \"First Note\") {\n      bpm = Math.round(1000 * 60 / beat.duration / 3);\n    } else if (useStore.getState().currentSongTitle === \"その心に灯る色は\") {\n      bpm = Math.round(1000 * 60 / beat.duration / 2);\n    } else {\n      bpm = Math.round(1000 * 60 / beat.duration);\n    }\n\n    if (bpm === this.currentBpm) return;\n    this.currentBpm = bpm;\n  };\n\n  #calcurateLetter = async (positionMs: number) => {\n    const char = this.player.video.findChar(positionMs);\n    if (!char) return;\n\n    const currentChar = useStore.getState().lyricChars?.get(char.startTime);\n    if (!currentChar) return;\n\n    if (currentChar.letter !== \"\") {\n      this.currentLetter = currentChar;\n    }\n\n    if (currentChar.furigana) {\n      this.currentFurigana = currentChar.furigana;\n    }\n  };\n\n  #moveSprite = (index: number) => {\n    const layer = useStore.getState().refKonvaLayer as Layer;\n    if (!layer) return;\n\n    const sprite = layer.getChildren((item) => item.name() === `Text-${index}`)[0];\n    gsap\n      .timeline()\n      .set(sprite, {\n        x: window.innerWidth * 1.2,\n        y: window.innerHeight * 1.2,\n      })\n      .to(sprite, {\n        x: window.innerWidth * 0.8,\n        y: window.innerHeight * 0.2,\n      })\n      .to(sprite, {\n        x: window.innerWidth * 0.6,\n        y: window.innerHeight * 0.33,\n        duration: 1,\n      })\n      .to(sprite, {\n        y: window.innerHeight * 0.5,\n        duration: 1,\n      })\n      .to(sprite, {\n        y: window.innerHeight * 0.8,\n        duration: 1,\n      })\n      .to(sprite, {\n        y: -100,\n      });\n  };\n\n  #positionMsToIndex = (positionMs: number) => {\n    if (this.queue.length === 0) {\n      return;\n    }\n\n    if (this.queue.length === 1) {\n      return this.queue[0][1].index;\n    }\n\n    let result = 0;\n\n    for (let i = 0; i < this.queue.length - 1; i++) {\n      const char = this.queue[i][1];\n      const nextChar = this.queue[i + 1][1];\n      const diff = Math.abs(char.startTime - positionMs) - Math.abs(nextChar.startTime - positionMs);\n      if (diff <= 0) {\n        result = char.index;\n        break;\n      }\n    }\n    if (this.queueFlag[result]) {\n      return;\n    } else {\n      this.queueFlag[result] = true;\n      return result;\n    }\n  }\n\n  onTimeUpdate = (positionMs: number) => {\n    this.#calcurateBpm(positionMs);\n    this.#calcurateLetter(positionMs);\n    const charIndex = this.#positionMsToIndex(positionMs);\n    if (charIndex) this.#moveSprite(charIndex);\n  };\n}\n","import React, { useEffect, useState, useRef } from \"react\";\n/** @jsx jsx */\n// noinspection ES6UnusedImports\nimport { css, jsx } from \"@emotion/react\";\nimport { IoPlaySkipForward, IoPlay, IoPause, IoStop } from \"react-icons/io5\";\nimport { TextAlive } from \"../components/TextAlive\";\nimport { useStore } from \"../components/Store\";\nimport { MMD } from \"../components/MMD\";\nimport { locales } from \"../data/locales\";\n\n\nconst setSeekBarStatus = (seekBarWidth: number) => {\n  const chara = useStore.getState().selectedModelNames[0];\n  const seekBar = document.querySelector(\".seekbar-container\") as HTMLDivElement;\n  seekBar.style.backgroundImage = `linear-gradient(90deg, ${useStore.getState().seekBarColors[chara]} ${seekBarWidth}%, rgb(240, 240, 240) ${seekBarWidth}%)`;\n};\n\n\nfunction loadTextAlive(refTextAlive: React.MutableRefObject<TextAlive>, setControllerShown: React.Dispatch<React.SetStateAction<boolean>>) {\n  if (refTextAlive.current) refTextAlive.current = undefined as any as TextAlive;\n\n  const textAlive = new TextAlive(useStore.getState().token);\n  refTextAlive.current = textAlive;\n\n  textAlive.player.addListener({\n    /* fired when you will be able to control play or pause */\n    onTimerReady: () => {\n      setControllerShown(true);\n    },\n\n    /* fired each time (many times in a second) playing position proceeds */\n    onTimeUpdate: (position) => {\n      setSeekBarStatus((position / textAlive.player.video.duration) * 100);\n      textAlive.onTimeUpdate(position);\n    },\n\n    /* fired when the song starts */\n    onPlay: () => {\n      const { selectedModelNames } = useStore.getState();\n      for (const name of selectedModelNames) {\n        MMD.findMotion(name, \"スクワット\").stop();\n        MMD.findMotion(name, \"スクワット\").play();\n        MMD.findMotion(name, \"スクワット\").fadeIn(1);\n      }\n    },\n\n    /* fired when the song pauses */\n    onPause: () => {\n      const { selectedModelNames } = useStore.getState();\n      for (const name of selectedModelNames) {\n        MMD.findMotion(name, \"スクワット\").fadeOut(1);\n      }\n    },\n\n    /* fired when the song stops */\n    onStop: () => {\n      const { selectedModelNames } = useStore.getState();\n      for (const name of selectedModelNames) {\n        MMD.findMotion(name, \"スクワット\").fadeOut(1);\n      }\n      textAlive.currentBpm = undefined;\n      textAlive.currentLetter = undefined;\n      textAlive.currentFurigana = \"\";\n    },\n  });\n}\n\n\nexport default () => {\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\n  const [controllerShown, setControllerShown] = useState(false);\n  const [songFinished, setSongFinished] = useState(Math.random());\n  const isModalWindowOpen = useStore((state) => state.isModalWindowOpen);\n  const refTextAlive = useRef({} as TextAlive);\n  useStore.setState({ refTextAlive: refTextAlive });\n\n  useEffect(() => loadTextAlive(refTextAlive, setControllerShown), [songFinished]);\n\n  function nextSong() {\n    if (useStore.getState().songsQueue.length === 0) return;\n    useStore.setState(({ songsQueue }) => ({\n      currentSongTitle: songsQueue[0],\n      songsQueue: songsQueue.slice(1)\n    }));\n    setIsPlaying(false);\n    setSongFinished(Math.random());\n  }\n\n  return (\n    <>\n      <div\n        css={css`\n          position: fixed;\n          left: 0;\n          top: 50%;\n          background: rgba(0, 0, 0, 0.8);\n          color: rgb(255, 255, 255);\n          padding: 10px 16px;\n          align-items: center;\n        `}>\n        <div>\n          BPM: <span id=\"BPM\" />\n        </div>\n        <div>\n          ♪: <span id=\"Letter\" />\n        </div>\n        <div>\n          ♫: <span id=\"Furigana\" />\n        </div>\n      </div>\n\n      <div\n        className=\"player-control\"\n        css={css`\n          display: ${controllerShown ? \"grid\" : \"none\"};\n          grid-template-columns: repeat(3, 1fr);\n          position: fixed;\n          bottom: 5rem;\n          left: 0;\n          background: rgba(0, 0, 0, 0.8);\n          color: rgb(255, 255, 255);\n          padding: 1rem;\n          align-items: center;\n\n          & button {\n            padding: 0.5rem;\n            display: block;\n            width: 100%;\n          }\n\n          & button svg {\n            width: 2rem;\n            height: 2rem;\n          }\n        `}\n      >\n        <button\n          className=\"start-pause\"\n          onClick={() => {\n            refTextAlive.current.playOrPause();\n            setIsPlaying(!isPlaying);\n          }}\n        >\n          {isPlaying\n            ? <><IoPause />{locales.pause}</>\n            : <><IoPlay />{locales.play}</>\n          }\n        </button>\n        <button\n          className=\"stop\"\n          disabled={!isPlaying}\n          onClick={() => {\n            refTextAlive.current.stop();\n            setIsPlaying(false);\n          }}\n        >\n          <IoStop />\n          {locales.stop}\n        </button>\n        <button\n          className=\"next\"\n          onClick={nextSong}\n        >\n          <IoPlaySkipForward />\n          {locales.next}\n        </button>\n      </div>\n\n      <div\n        className=\"seekbar-container\"\n        onClick={refTextAlive.current.seek}\n        css={css`\n          display: ${isModalWindowOpen ? \"none\" : \"block\"};\n          background-color: rgb(240, 240, 240);\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          height: 10px;\n          border-radius: 8px;\n        `}\n      >\n      </div>\n    </>\n  );\n};\n"],"names":["TextAlive","constructor","token","currentFurigana","queue","queueFlag","onAppReady","app","songUrl","songTitle","currentSongTitle","songData","item","title","this","currentSongData","player","createFromSongUrl","videoUrl","video","onVideoReady","firstChar","furigana","words","charsAll","index","char","letter","text","push","startTime","next","forEach","_","startIndex","findIndex","pos","length","filter","position","map","join","k","Array","fill","lyricChars","Map","stop","requestStop","seek","event","requestMediaSeek","duration","clientX","currentTarget","clientWidth","playOrPause","isPlaying","requestPause","requestPlay","async","positionMs","beat","findBeat","bpm","Math","round","currentBpm","findChar","currentChar","get","currentLetter","layer","refKonvaLayer","sprite","getChildren","name","gsap","set","x","window","innerWidth","y","innerHeight","to","result","i","nextChar","abs","onTimeUpdate","charIndex","mediaElement","document","querySelector","mediaBannerPosition","addListener","setIsPlaying","useState","controllerShown","setControllerShown","songFinished","setSongFinished","random","isModalWindowOpen","state","refTextAlive","useRef","useEffect","current","undefined","textAlive","onTimerReady","seekBarWidth","chara","selectedModelNames","style","backgroundImage","seekBarColors","setSeekBarStatus","onPlay","MMD","M","play","fadeIn","onPause","fadeOut","onStop","loadTextAlive","css","id","className","onClick","locales","disabled","songsQueue","slice"],"sourceRoot":""}